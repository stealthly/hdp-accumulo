#
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#

# NAGIOS SERVER Check (status log update)
define service {
        name                            hadoop-service
        use                             generic-service
        notification_options            w,u,c
        first_notification_delay        0
        notification_interval           0     # Send the notification once
}

define service {        
        hostgroup_name          nagios-server        
        use                     hadoop-service
        service_description     NAGIOS::Nagios status log freshness
        servicegroups           NAGIOS
        check_command           check_nagios!10!@STATUS_DAT@!@NAGIOS_BIN@
        normal_check_interval   5
        retry_check_interval    0.5
        max_check_attempts      2
}

define service {
        hostgroup_name          nagios-server
        use                     hadoop-service
        service_description     HDFS::Percent DataNodes with space available
        servicegroups           HDFS
        check_command           check_aggregate!"DATANODE::DataNode space"!10%!30%
        normal_check_interval   2
        retry_check_interval    1 
        max_check_attempts      1
}

define service {
        hostgroup_name          nagios-server
        use                     hadoop-service
        service_description     HDFS::Percent DataNodes live
        servicegroups           HDFS
        check_command           check_aggregate!"DATANODE::DataNode process"!10%!30%
        normal_check_interval   0.5
        retry_check_interval    0.25
        max_check_attempts      3
}

# HDFS Checks
define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     NAMENODE::NameNode Web UI
        servicegroups           HDFS
        check_command           check_webui!namenode
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     NAMENODE::NameNode edit logs directory status
        servicegroups           HDFS
        check_command           check_name_dir_status!50070
        normal_check_interval   0.5
        retry_check_interval    0.5
        max_check_attempts      3
}

define service {        
        hostgroup_name          namenode        
        use                     hadoop-service
        service_description     NAMENODE::NameNode Host CPU utilization
        servicegroups           HDFS
        check_command           check_cpu!200%!250%
        normal_check_interval   5
        retry_check_interval    2 
        max_check_attempts      5
}

define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     NAMENODE::NameNode process
        servicegroups           HDFS
        check_command           check_tcp!8020!-w 1 -c 1
        normal_check_interval   0.5
        retry_check_interval    0.25
        max_check_attempts      3
}

define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     HDFS::Blocks health
        servicegroups           HDFS
        check_command           check_hdfs_blocks!50070!0%!0%
        normal_check_interval   2
        retry_check_interval    1 
        max_check_attempts      1
}

define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     HDFS::HDFS capacity utilization
        servicegroups           HDFS
        check_command           check_hdfs_capacity!50070!80%!90%
        normal_check_interval   10
        retry_check_interval    1 
        max_check_attempts      1
}

define service {
        hostgroup_name          namenode
        use                     hadoop-service
        service_description     HDFS::NameNode RPC Latency
        servicegroups           HDFS
        check_command           check_rpcq_latency!NameNode!50070!3000!5000
        normal_check_interval   5
        retry_check_interval    1 
        max_check_attempts      5
}


###########################################################################
#
# GANGLIA SERVER Checks
#
define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::GangliaServer process
        servicegroups           GANGLIA
        check_command           check_tcp!8651!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for Slaves
        servicegroups           GANGLIA
        check_command           check_tcp!8660!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for NameNode
        servicegroups           GANGLIA
        check_command           check_tcp!8661!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for HBase Master
        servicegroups           GANGLIA
        check_command           check_tcp!8663!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for ResourceManager
        servicegroups           GANGLIA
        check_command           check_tcp!8664!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for NodeManager
        servicegroups           GANGLIA
        check_command           check_tcp!8660!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

define service {
        hostgroup_name          ganglia-server
        use                     hadoop-service
        service_description     GANGLIA::Ganglia Monitor process for HistoryServer
        servicegroups           GANGLIA
        check_command           check_tcp!8666!-w 1 -c 1
        normal_check_interval   0.25
        retry_check_interval    0.25
        max_check_attempts      4
}

###########################################################################
#
# YARN Checks
#

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::ResourceManager Web UI
        servicegroups           YARN
        check_command           check_webui!resourcemanager!8088
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::ResourceManager CPU utilization
        servicegroups           YARN
        check_command           check_cpu!200%!250%
        normal_check_interval   5
        retry_check_interval    2 
        max_check_attempts      5
}

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::ResourceManager RPC latency
        servicegroups           YARN
        check_command           check_rpcq_latency!ResorceManager!8088!3000!5000
        normal_check_interval   5
        retry_check_interval    1 
        max_check_attempts      5
}

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::Percent NodeManager live
        servicegroups           YARN
        check_command           check_resourcemanager_nodes_percentage!8088!lost!10!30
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::Percent NodeManager healthy
        servicegroups           YARN
        check_command           check_resourcemanager_nodes_percentage!8088!unhealthy!10!30
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

define service {
        hostgroup_name          resourcemanager
        use                     hadoop-service
        service_description     RESOURCEMANAGER::ResourceManager process
        servicegroups           YARN
        check_command           check_tcp!8088!-w 1 -c 1
        normal_check_interval   1
        retry_check_interval    0.5
        max_check_attempts      3
}


# YARN::NODEMANAGER Checks
define service {
        hostgroup_name          nodemanagers
        use                     hadoop-service
        service_description     NODEMANAGER::NodeManager process
        servicegroups           YARN
        check_command           check_tcp!8042!-w 1 -c 1
        normal_check_interval   1
        retry_check_interval    0.5
        max_check_attempts      3
}

define service {
        hostgroup_name          nodemanagers
        use                     hadoop-service
        service_description     NODEMANAGER::NodeManager health
        servicegroups           YARN
        check_command           check_nodemanager_health!8042
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}


# MAPREDUCE::JOBHISTORY Checks
define service {
        hostgroup_name          historyserver2
        use                     hadoop-service
        service_description     JOBHISTORY::HistoryServer Web UI
        servicegroups           MAPREDUCE
        check_command           check_webui!historyserver2!19888
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

define service {
        hostgroup_name          historyserver2
        use                     hadoop-service
        service_description     JOBHISTORY::HistoryServer CPU utilization
        servicegroups           MAPREDUCE
        check_command           check_cpu!200%!250%
        normal_check_interval   5
        retry_check_interval    2 
        max_check_attempts      5
}

define service {
        hostgroup_name          historyserver2
        use                     hadoop-service
        service_description     JOBHISTORY::HistoryServer RPC latency
        servicegroups           MAPREDUCE
        check_command           check_rpcq_latency!JobHistoryServer!19888!3000!5000
        normal_check_interval   5
        retry_check_interval    1 
        max_check_attempts      5
}

###########################################################################
#
# ZOOKEEPER Checks
#
define service {
        hostgroup_name          nagios-server
        use                     hadoop-service
        service_description     ZOOKEEPER::Percent ZooKeeper Servers live
        servicegroups           ZOOKEEPER
        check_command           check_aggregate!"ZKSERVERS::ZooKeeper Server process"!35%!70%
        normal_check_interval   0.5
        retry_check_interval    0.25
        max_check_attempts      3
}

define service {
        hostgroup_name          zookeeper-servers
        use                     hadoop-service
        service_description     ZKSERVERS::ZooKeeper Server live
        servicegroups           ZOOKEEPER
        check_command           check_tcp!2181!-w 1 -c 1
        normal_check_interval   1
        retry_check_interval    0.5
        max_check_attempts      3
}

###########################################################################
#
# HBASE Checks
#

# HBASE::REGIONSERVER Checks
define service {
        hostgroup_name          nagios-server
        use                     hadoop-service
        service_description     HBASE::Percent RegionServers live
        servicegroups           HBASE
        check_command           check_aggregate!"REGIONSERVER::RegionServer process"!10%!30%
        normal_check_interval   0.5
        retry_check_interval    0.25
        max_check_attempts      3
}

# HBASE::REGIONSERVER Checks
define service {
        hostgroup_name          region-servers
        use                     hadoop-service
        service_description     REGIONSERVER::Process down
        servicegroups           HBASE
        check_command           check_tcp!60020!-w 1 -c 1
        normal_check_interval   1
        retry_check_interval    0.5
        max_check_attempts      3
}

# HBASE::MASTER Checks
define service {
        hostgroup_name          hbasemaster
        use                     hadoop-service
        service_description     HBASEMASTER::HBase Web UI down
        servicegroups           HBASE
        check_command           check_webui!hbase
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

# HBASE::MASTER Checks
define service {
        hostgroup_name          hbasemaster
        use                     hadoop-service
        service_description     HBASEMASTER::HBaseMaster CPU utilization
        servicegroups           HBASE
        check_command           check_cpu!200%!250%
        normal_check_interval   5
        retry_check_interval    2 
        max_check_attempts      5
}

# HBASE::MASTER Checks
define service {
        hostgroup_name          hbasemaster
        use                     hadoop-service
        service_description     HBASEMASTER::HBaseMaster Process down
        servicegroups           HBASE
        check_command           check_tcp!60000!-w 1 -c 1
        normal_check_interval   0.5
        retry_check_interval    0.25
        max_check_attempts      4
}

###########################################################################
#
# HIVE + WEBHCAT Checks
#

# HIVE Metastore check
define service {
        hostgroup_name          hiveserver
        use                     hadoop-service
        service_description     HIVE-METASTORE::HIVE-METASTORE status check
        servicegroups           HIVE-METASTORE
        check_command           check_hive_metastore_status!9083!@JAVA_HOME@
        normal_check_interval   0.5
        retry_check_interval    0.5
        max_check_attempts      3
}

# Webhcat check
define service {
        hostgroup_name          webhcat-server
        use                     hadoop-service
        service_description     WEBHCAT::WebHcat status check
        servicegroups           WEBHCAT 
        check_command           check_webhcat_status!50111!v1
        normal_check_interval   1
        retry_check_interval    0.5
        max_check_attempts      3
}

###########################################################################
#
# Oozie Checks
#

# Oozie check
define service {
        hostgroup_name          oozie-server
        use                     hadoop-service
        service_description     OOZIE::Oozie status check
        servicegroups           OOZIE
        check_command           check_oozie_status!11000!@JAVA_HOME@
        normal_check_interval   1
        retry_check_interval    1
        max_check_attempts      3
}

